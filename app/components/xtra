import mongoose, { Schema, Document, model } from "mongoose";

interface Appointment extends Document {
  fullName: string;
  cnic: string;
  dateOfBirth: string;
  age: number;
  email: string;
  contact: string;
  medicalRecord?: string;
  service: string;
  equationAnswer: string;
  status: "scheduled" | "pending" | "canceled"; // Added status field
  createdAt: Date;
}

const AppointmentSchema = new Schema<Appointment>({
  fullName: { type: String, required: true },
  cnic: { type: String, required: true },
  dateOfBirth: { type: String, required: true },
  age: { type: Number, required: true },
  email: { type: String, required: true },
  contact: { type: String, required: true },
  medicalRecord: { type: String },
  service: { type: String, required: true },
  equationAnswer: { type: String, required: true },
  status: {
    type: String,
    enum: ["scheduled", "pending", "canceled"], // Restrict to allowed values
    default: "scheduled", // Default status when creating an appointment
  },
  createdAt: { type: Date, default: Date.now },
});

export default mongoose.models.Appointment || model<Appointment>("Appointment", AppointmentSchema);


   below this the api 


   import { NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";
import mongoose from "mongoose";

// Fetch all appointments
export async function GET(req: Request, { params }: { params: { id?: string } }) {
  try {
    await dbConnect();

    if (params?.id) {
      // Fetch a single appointment by ID
      if (!mongoose.Types.ObjectId.isValid(params.id)) {
        return NextResponse.json(
          { success: false, error: "Invalid appointment ID" },
          { status: 400 }
        );
      }

      const appointment = await Appointment.findById(params.id);

      if (!appointment) {
        return NextResponse.json(
          { success: false, error: "Appointment not found" },
          { status: 404 }
        );
      }

      return NextResponse.json({ success: true, data: appointment }, { status: 200 });
    }

    // Fetch all appointments
    const appointments = await Appointment.find({}).sort({ createdAt: -1 });

    return NextResponse.json({ success: true, data: appointments }, { status: 200 });
  } catch (error) {
    console.error("Error fetching appointments:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Create a new appointment
export async function POST(req: Request) {
  try {
    const body = await req.json();
    await dbConnect();

    const requiredFields = ["fullName", "cnic", "dateOfBirth", "age", "email", "contact", "service", "equationAnswer"];

    for (const field of requiredFields) {
      if (!body[field]) {
        return NextResponse.json({ success: false, error: `Missing required field: ${field}` }, { status: 400 });
      }
    }

    const newAppointment = await Appointment.create(body);

    return NextResponse.json(
      { success: true, data: newAppointment, appointmentId: newAppointment._id },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Update appointment status
export async function PATCH(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    const { status } = await req.json();

    if (!id || !mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ success: false, error: "Invalid or missing appointment ID" }, { status: 400 });
    }

    if (!status || !["scheduled", "pending", "canceled"].includes(status)) {
      return NextResponse.json({ success: false, error: "Invalid status value" }, { status: 400 });
    }

    await dbConnect();
    const updatedAppointment = await Appointment.findByIdAndUpdate(id, { status }, { new: true });

    if (!updatedAppointment) {
      return NextResponse.json({ success: false, error: "Appointment not found" }, { status: 404 });
    }

    return NextResponse.json({ success: true, data: updatedAppointment }, { status: 200 });
  } catch (error) {
    console.error("Error updating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}
  


below this 

  "use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";

const BookAppointment = () => {
  const router = useRouter();
  const [formData, setFormData] = useState({
    fullName: "",
    cnic: "",
    dateOfBirth: "",
    age: "",
    email: "",
    contact: "",
    service: "",
    equationAnswer: "",
  });

  const [loading, setLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch("/api/appointments", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (data.success) {
        toast.success("‚úÖ Appointment successfully booked!");
        router.push(`/appointment-details/${data.appointmentId}`);
      } else {
        toast.error(data.error || "‚ùå Failed to book appointment");
      }
    } catch (error) {
      toast.error("‚ö†Ô∏è An error occurred while booking the appointment.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center px-4 md:px-8 py-12 bg-gray-950 text-gray-300">
      <div className="bg-gray-900 bg-opacity-80 backdrop-blur-md shadow-2xl rounded-2xl p-6 sm:p-10 w-full max-w-2xl border border-gray-700">
        <h1 className="text-4xl font-extrabold text-center text-white mb-6">üìÖ Book Appointment</h1>

        <form onSubmit={handleSubmit} className="flex flex-col gap-5">
          <input type="text" name="fullName" placeholder="Full Name" value={formData.fullName} onChange={handleChange} required className="input-field" />
          <input type="text" name="cnic" placeholder="CNIC (without dashes)" value={formData.cnic} onChange={handleChange} required className="input-field" />
          <input type="date" name="dateOfBirth" value={formData.dateOfBirth} onChange={handleChange} required className="input-field" />
          <input type="number" name="age" placeholder="Age" value={formData.age} onChange={handleChange} required className="input-field" />
          <input type="email" name="email" placeholder="Email" value={formData.email} onChange={handleChange} required className="input-field" />
          <input type="tel" name="contact" placeholder="Contact" value={formData.contact} onChange={handleChange} required className="input-field" />

          <select name="service" value={formData.service} onChange={handleChange} required className="input-field">
            <option value="">Select a Service</option>
            <option value="Home Lab">Home Lab</option>
            <option value="Home Physio">Home Physio</option>
            <option value="Home Pharmacy">Home Pharmacy</option>
            <option value="Tele Medicine">Tele Medicine</option>
          </select>

          <input type="text" name="equationAnswer" placeholder="Enter Equation Answer" value={formData.equationAnswer} onChange={handleChange} required className="input-field" />

          <button type="submit" className="w-full bg-green-600 hover:bg-green-500 text-white font-bold py-3 px-6 rounded-lg transition-all transform hover:scale-105 flex items-center justify-center" disabled={loading}>
            {loading ? "Booking..." : "Book Appointment"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default BookAppointment;

















updated   

'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-toastify';
import { FaUser, FaIdCard, FaCalendarAlt, FaEnvelope, FaPhone, FaCheckCircle, FaClock, FaCalculator } from 'react-icons/fa';

const BookAppointment = () => {
  const router = useRouter();
  const [formData, setFormData] = useState({
    fullName: '',
    cnic: '',
    dateOfBirth: '',
    age: '',
    email: '',
    contact: '',
    service: '',
    selectedDate: '',
    selectedTime: '',
    equationAnswer: '',
  });

  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [availableTimes] = useState([
    '08:30 AM', '09:30 AM', '10:30 AM', '11:30 AM', '12:30 PM', '01:30 PM', '02:30 PM', '03:30 PM', '04:30 PM'
  ]);
  const [weekDays, setWeekDays] = useState<string[]>([]);

  useEffect(() => {
    generateWeekDays();
  }, []);

  const generateWeekDays = () => {
    const days: string[] = [];
    const now = new Date();
    for (let i = 0; i < 7; i++) {
      const date = new Date();
      date.setDate(now.getDate() + i);
      const dayAbbr = date.toLocaleDateString('en-US', { weekday: 'short' });
      const formattedDate = date.toISOString().split('T')[0];
      days.push(`${dayAbbr}-${formattedDate}`);
    }
    setWeekDays(days);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.selectedDate || !formData.selectedTime) {
      toast.error('Please select a valid date and time.');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/appointments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (data.success) {
        toast.success('‚úÖ Appointment successfully booked!');
        setSubmitted(true);
        setShowConfirm(false);
        toast.info(`A confirmation email has been sent to ${formData.email}`);
        router.push(`/appointment-details/${data.appointmentId}`);
      } else {
        toast.error(data.error || '‚ùå Failed to book appointment');
      }
    } catch (error: any) {
      toast.error('‚ö†Ô∏è An error occurred while booking the appointment.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center px-6 py-12 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-200">
      <div className="bg-gray-800/90 backdrop-blur-lg shadow-xl rounded-xl p-8 w-full max-w-2xl">
        <h1 className="text-3xl font-bold text-center text-white mb-6">üìÖ Book Your Appointment</h1>

        {submitted && (
          <div className="bg-green-500 text-white text-center p-3 rounded-lg mb-4 flex items-center justify-center gap-2">
            <FaCheckCircle /> Appointment booked! Confirmation sent to {formData.email}.
          </div>
        )}

        <form onSubmit={handleSubmit} className="flex flex-col gap-6">
          {/* Input Fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[{
              label: 'Full Name', name: 'fullName', type: 'text', icon: FaUser
            }, {
              label: 'CNIC (without dashes)', name: 'cnic', type: 'text', icon: FaIdCard
            }, {
              label: 'Date of Birth', name: 'dateOfBirth', type: 'date', icon: FaCalendarAlt
            }, {
              label: 'Age', name: 'age', type: 'number'
            }, {
              label: 'Email', name: 'email', type: 'email', icon: FaEnvelope
            }, {
              label: 'Contact', name: 'contact', type: 'tel', icon: FaPhone
            }].map((field, index) => (
              <div key={index} className="relative">
                {field.icon && <field.icon className="absolute left-3 top-3 text-gray-400" />}
                <input
                  type={field.type}
                  name={field.name}
                  placeholder={field.label}
                  value={formData[field.name]}
                  onChange={handleChange}
                  required
                  className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 pl-10 focus:ring-2 focus:ring-green-500 outline-none transition-all"
                />
              </div>
            ))}
          </div>

          {/* Service Selection */}
          <select
            name="service"
            value={formData.service}
            onChange={handleChange}
            required
            className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 outline-none focus:ring-2 focus:ring-green-500 transition-all"
          >
            <option value="">Select a Service</option>
            <option value="Home Lab">Home Lab</option>
            <option value="Home Physio">Home Physio</option>
            <option value="Home Pharmacy">Home Pharmacy</option>
            <option value="Tele Medicine">Tele Medicine</option>
          </select>

          {/* Date Selection */}
          <div className="w-full">
            <h3 className="text-lg font-semibold text-white mb-2">Choose a Date:</h3>
            <div className="flex gap-2 flex-wrap">
              {weekDays.map((day, index) => {
                const [dayAbbr, date] = day.split('-');
                return (
                  <button
                    key={index}
                    type="button"
                    className={`px-4 py-2 rounded-lg border ${formData.selectedDate === date
                      ? 'bg-green-500 text-white border-green-400 shadow-lg'
                      : 'bg-gray-800 text-gray-300 border-gray-600 hover:bg-green-600 hover:text-white'
                    }`}
                    onClick={() => setFormData({ ...formData, selectedDate: date })}
                  >
                    {dayAbbr}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Time Selection */}
          {formData.selectedDate && (
            <div className="mt-4">
              <h3 className="text-lg font-semibold text-white mb-2">Choose a Time:</h3>
              <div className="grid grid-cols-3 gap-2">
                {availableTimes.map((time, index) => (
                  <button
                    key={index}
                    className={`py-2 px-3 rounded-lg border ${formData.selectedTime === time
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-800 text-gray-300 hover:bg-green-600 hover:text-white'
                    }`}
                    onClick={() => {
                      setFormData({ ...formData, selectedTime: time });
                      setShowConfirm(true);
                    }}
                  >
                    {time}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Confirmation Message */}
          {showConfirm && formData.selectedDate && formData.selectedTime && (
            <div className="bg-green-700 text-white text-center p-3 rounded-lg flex items-center gap-2">
              <FaCheckCircle className="text-xl" />
              <p>
                {new Date(formData.selectedDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric', day: 'numeric' })}, {formData.selectedTime}
              </p>
            </div>
          )}

          {/* Equation Input */}
          <div className="relative">
            <FaCalculator className="absolute left-3 top-3 text-gray-400" />
            <input
              type="text"
              name="equationAnswer"
              placeholder="Equation 8+5 =?"
              value={formData.equationAnswer}
              onChange={handleChange}
              required
              className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 pl-10 focus:ring-2 focus:ring-green-500 outline-none transition-all"
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="w-full bg-green-500 text-white py-3 rounded-lg font-semibold">
            {loading ? 'Booking...' : 'Book Appointment'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default BookAppointment;
















////details page  



"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

export default function AppointmentDetailsPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [appointment, setAppointment] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAppointment = async () => {
      try {
        const response = await fetch(`/api/appointments/${params.id}`);
        const data = await response.json();
        if (data.success) {
          setAppointment(data.appointment);
        }
      } catch (error) {
        console.error("Error fetching appointment:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAppointment();
  }, [params.id]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900 py-12 px-6">
      <div className="bg-gray-800 shadow-xl rounded-3xl p-8 w-full max-w-lg transform transition-transform duration-300 ease-in-out hover:scale-105">
        {loading ? (
          <div className="flex justify-center items-center space-x-2">
            <div className="w-8 h-8 border-4 border-t-4 border-gray-500 border-solid rounded-full animate-spin"></div>
            <h1 className="text-xl text-gray-400">Loading appointment details...</h1>
          </div>
        ) : appointment ? (
          <>
            {/* Appointment Details Header */}
            <h1 className="text-3xl sm:text-4xl md:text-5xl font-extrabold text-center text-teal-500 mb-6">Appointment Details</h1>
            
            {/* Appointment Information */}
            <div className="grid gap-4 sm:grid-cols-2 text-gray-300">
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Full Name:</strong> <span>{appointment.fullName}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">CNIC:</strong> <span>{appointment.cnic}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Date of Birth:</strong> <span>{appointment.dateOfBirth}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Age:</strong> <span>{appointment.age}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Email:</strong> <span>{appointment.email}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Contact:</strong> <span>{appointment.contact}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Service:</strong> <span>{appointment.service}</span>
              </div>
              <div className="flex justify-between text-sm sm:text-base">
                <strong className="font-semibold">Appointment ID:</strong> <span className="text-teal-500">{params.id}</span>
              </div>
            </div>

            {/* Go Home Button */}
            <div className="text-center mt-6">
              <button
                onClick={() => router.push("/")}
                className="w-full py-3 px-4 bg-teal-600 hover:bg-teal-500 text-white font-semibold rounded-lg shadow-lg transform transition-all duration-300 ease-in-out hover:scale-105 sm:w-auto"
              >
                Go Home
              </button>
            </div>
          </>
        ) : (
          <h1 className="text-2xl text-center text-red-500">Appointment not found!</h1>
        )}
      </div>
    </div>
  );
}







"use client";

import { useState, useEffect } from "react";
import { MdEvent } from "react-icons/md";
import Link from "next/link";
import { FiMenu } from "react-icons/fi";
import { IoMdClose } from "react-icons/io";
import { motion, AnimatePresence } from "framer-motion";
import { useRouter } from "next/navigation";

const Navbar = () => {
  const [menuOpen, setMenuOpen] = useState(false);
  const [homeDropdownOpen, setHomeDropdownOpen] = useState(false);
  const [mobileHomeDropdown, setMobileHomeDropdown] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    setIsLoggedIn(!!token); // This checks if the token is present
  }, []);

  const toggleMenu = () => setMenuOpen((prev) => !prev);
  const toggleMobileHomeDropdown = () => setMobileHomeDropdown((prev) => !prev);

  const handleLogin = () => {
    // Simulating a login action
    localStorage.setItem("token", "user_token"); // Save token to local storage
    setIsLoggedIn(true); // Update the login state
  };

  const handleLogout = () => {
    localStorage.removeItem("token"); // Remove the token from local storage
    setIsLoggedIn(false); // Update the login state
    router.push("/login"); // Redirect to login page
  };

  return (
    <nav className="bg-gradient-to-r from-gray-900 to-gray-800 text-white shadow-lg sticky top-0 z-50 border-b border-gray-700">
      <div className="container mx-auto flex items-center justify-between py-4 px-6">
        {/* Logo */}
        <Link href="/" className="flex items-center">
          <MdEvent size={32} className="text-green-400" />
          <span className="ml-3 text-2xl font-bold text-green-300 hover:scale-105 transition">
            ABCare
          </span>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden lg:flex items-center px-8 py-2 bg-gray-900 rounded-full space-x-6 shadow-lg border border-gray-700">
          <div
            className="relative"
            onMouseEnter={() => setHomeDropdownOpen(true)}
            onMouseLeave={() => setHomeDropdownOpen(false)}
          >
            <button className="text-white font-semibold hover:text-green-400 transition px-4 py-2 rounded-md hover:bg-green-700">
              Home
            </button>
            <AnimatePresence>
              {homeDropdownOpen && (
  <motion.div
  initial={{ opacity: 0, y: -10 }}
  animate={{ opacity: 1, y: 0 }}
  exit={{ opacity: 0, y: -10 }}
  className="absolute top-full left-0 mt-2 bg-gray-800 rounded-lg shadow-lg border border-gray-700 w-56"
>
  {["Pharmacy", "Vaccination", "Phisio", "Mothercare", "Lab"].map((service) => (
    <Link
      key={service}
      href={`/${service.toLowerCase() === "phisio" ? "rehabilitationServices" 
        : service.toLowerCase() === "pharmacy" ? "medicines" 
        : service.toLowerCase()}`}
      className="block px-4 py-3 text-white hover:bg-green-700 rounded-md"
    >
      Home {service} Service
    </Link>
  ))}
</motion.div>
              )}
            </AnimatePresence>
          </div>
          <Link href="/doctors" className="text-white font-semibold hover:text-green-400 px-4 py-2 rounded-md hover:bg-green-700">
            Our Doctors
          </Link>
          <Link href="/aboutus" className="text-white font-semibold hover:text-green-400 px-4 py-2 rounded-md hover:bg-green-700">
            About Us
          </Link>
        </div>

        {/* Desktop Buttons */}
        <div className="hidden lg:flex items-center space-x-3">
          <Link href="/book-appointment" className="bg-green-600 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
            Book Appointment
          </Link>

          {/* My Appointments Button */}
          {isLoggedIn && (
            <Link href="/dashboard" className="bg-blue-600 text-white px-5 py-2 rounded-full shadow-md hover:bg-blue-500 transition">
              My Appointments
            </Link>
          )}

          {!isLoggedIn ? (
            <Link href="/login" className="bg-gray-900 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
              Login
            </Link>
          ) : (
            <button onClick={handleLogout} className="bg-gray-900 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
              Logout
            </button>
          )}
        </div>

        {/* Mobile Menu Button */}
        <button
          className="lg:hidden flex items-center justify-center w-12 h-12 border border-gray-600 rounded-lg bg-gray-800"
          onClick={toggleMenu}
        >
          {menuOpen ? <IoMdClose size={28} className="text-white" /> : <FiMenu size={28} className="text-white" />}
        </button>
      </div>

      {/* Mobile Menu */}


{/* Mobile Menu */}
<AnimatePresence>
  {menuOpen && (
    <motion.div
      initial={{ opacity: 0, height: 0 }}
      animate={{ opacity: 1, height: "auto" }}
      exit={{ opacity: 0, height: 0 }}
      className="lg:hidden bg-gray-900 text-white p-6 border-t border-gray-700 rounded-b-lg"
    >
      <button
        onClick={toggleMobileHomeDropdown}
        className="flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:bg-green-700 rounded-md transition"
      >
        Home
        <span>{mobileHomeDropdown ? "‚ñ≤" : "‚ñº"}</span>
      </button>
      <AnimatePresence>
        {mobileHomeDropdown && (
          <motion.div className="ml-4 mt-2 space-y-2">
            {[
              { name: "Pharmacy", path: "/medicines" },
              { name: "Vaccination", path: "/vaccination" },
              { name: "Phisio", path: "/rehabilitationServices" },
              { name: "Mothercare", path: "/mothercare" },
              { name: "Lab", path: "/lab" },
            ].map((service) => (
              <Link
                key={service.name}
                href={service.path}
                className="block px-4 py-2 hover:bg-green-700 rounded-md"
                onClick={() => setMenuOpen(false)} // Close menu on link click
              >
                Home {service.name} Service
              </Link>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
      <Link href="/doctors" className="block px-4 py-3 hover:bg-green-700 rounded-md" onClick={() => setMenuOpen(false)}>
        Our Doctors
      </Link>
      <Link href="/aboutus" className="block px-4 py-3 hover:bg-green-700 rounded-md" onClick={() => setMenuOpen(false)}>
        About Us
      </Link>
      <div className="mt-6 flex flex-col gap-3 sm:flex-row">
        <Link href="/book-appointment" className="w-full bg-green-600 text-white text-center py-3 rounded-md shadow-md hover:bg-green-500 transition" onClick={() => setMenuOpen(false)}>
          Book Appointment
        </Link>
        {isLoggedIn && (
          <Link href="/dashboard" className="w-full bg-blue-600 text-white text-center py-3 rounded-md shadow-md hover:bg-blue-500 transition" onClick={() => setMenuOpen(false)}>
            My Appointments
          </Link>
        )}
        {!isLoggedIn ? (
          <Link href="/login" className="w-full bg-gray-900 text-white text-center py-3 rounded-md shadow-md hover:bg-green-500 transition" onClick={() => setMenuOpen(false)}>
            Login
          </Link>
        ) : (
          <button onClick={() => { handleLogout(); setMenuOpen(false); }} className="w-full bg-gray-900 text-white py-3 rounded-md shadow-md hover:bg-green-500 transition">
            Logout
          </button>
        )}
      </div>
    </motion.div>
  )}
</AnimatePresence>

    </nav>
  );
};
export default Navbar;






'use client';

import React, { useState } from "react";
import {
  FaFacebookF,
  FaGithub,
  FaLinkedinIn,
  FaPills,
  FaHeartbeat,
  FaSyringe,
  FaHandHoldingHeart,
  FaPhoneAlt,
} from "react-icons/fa";
import Link from "next/link";
import { motion } from "framer-motion";

const Footer = () => {
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const handleSubscribe = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      setMessage("Please enter a valid email address.");
      return;
    }

    try {
      const response = await fetch("/api/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();
      setMessage(data.message);
      if (response.status === 201) setEmail("");
    } catch (error) {
      setMessage("An error occurred. Please try again later.");
    }
  };

  return (
    <footer className="relative bg-gray-900 text-gray-300 py-12 px-6 lg:px-20">
      {/* Background Glow Effect */}
      <div className="absolute inset-0 pointer-events-none">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 0.15 }}
          className="absolute inset-0 bg-green-500 blur-[150px]"
        />
      </div>

      {/* Newsletter Subscription */}
      <div className="max-w-3xl mx-auto text-center mb-10">
        <h3 className="text-lg sm:text-2xl font-semibold text-white">
          Stay Updated!
        </h3>
        <p className="text-sm text-gray-400 mb-5">
          Subscribe for the latest updates & exclusive health tips.
        </p>
        <form
          onSubmit={handleSubscribe}
          className="flex flex-col sm:flex-row items-center gap-4"
        >
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="flex-1 w-full p-3 rounded-lg bg-gray-800 text-white focus:ring-2 focus:ring-green-500 placeholder-gray-400 text-sm"
          />
          <button
            type="submit"
            className="w-full sm:w-1/3 bg-green-500 hover:bg-green-600 text-white text-sm px-6 py-3 rounded-lg transition-all"
          >
            Subscribe
          </button>
        </form>
        {message && (
          <p
            className={`mt-3 text-sm ${
              message.startsWith("Thank") ? "text-green-400" : "text-red-400"
            }`}
          >
            {message}
          </p>
        )}
      </div>

      {/* Footer Sections */}
      <div className="max-w-7xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-10">
        {/* About ABCare */}
        <div>
          <h2 className="text-2xl font-bold text-white tracking-wide mb-3">
            ABCare
          </h2>
          <p className="text-sm text-gray-400">
            Providing high-standard healthcare services, including Lab, Physio, Nursing, and Pharmacy delivery.
          </p>
        </div>

        {/* Quick Links */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Quick Links</h3>
          <ul className="space-y-2">
            {[
              { label: "Pharmacy", icon: FaPills, link: "/medicines", color: "text-red-400" },
              { label: "Lab Services", icon: FaHeartbeat, link: "/lab", color: "text-blue-400" },
              { label: "Vaccination", icon: FaSyringe, link: "/vaccination", color: "text-yellow-400" },
              { label: "Mother Care", icon: FaHandHoldingHeart, link: "/mothercare", color: "text-pink-400" },
              { label: "Physio", icon: FaPhoneAlt, link: "/rehabilitationServices", color: "text-green-400" },
              { label: "Tele Clinic", icon: FaPhoneAlt, link: "/tele", color: "text-purple-400" },
            ].map(({ label, icon: Icon, link, color }) => (
              <li key={label} className="flex items-center gap-3 group">
                <Icon className={`${color} text-lg transition-colors group-hover:text-white`} />
                <Link href={link} className="text-sm text-gray-300 hover:text-green-400 transition-all">
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>

        {/* Contact Info */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Contact Us</h3>
          <p className="text-sm text-gray-400">
            üìç 123 Healthcare Street, Jaranwala, Pakistan
          </p>
          <p className="text-sm text-gray-400">üìß info@abcare.com</p>
          <p className="text-sm text-gray-400">üìû +123 456 7890</p>
        </div>

        {/* Social Media */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Follow Us</h3>
          <div className="flex space-x-5">
            {[
              { icon: FaFacebookF, link: "#", color: "text-blue-600" },
              { icon: FaGithub, link: "#", color: "text-gray-700" },
              { icon: FaLinkedinIn, link: "#", color: "text-blue-500" },
            ].map(({ icon: Icon, link, color }) => (
              <a
                key={link}
                href={link}
                className="w-10 h-10 flex items-center justify-center bg-gray-800 rounded-full text-gray-300 hover:bg-green-500 hover:text-white transition-all shadow-md"
              >
                <Icon className={`${color} text-lg`} />
              </a>
            ))}
          </div>
        </div>
      </div>

      {/* Divider */}
      <div className="mt-10 border-t border-gray-700 opacity-50"></div>

      {/* Copyright */}
      <div className="mt-5 text-center text-sm text-gray-500">
        <p>¬© {new Date().getFullYear()} ABCare. All Rights Reserved.</p>
      </div>
    </footer>
  );
};

export default Footer;





route.ts

import { NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";
import mongoose from "mongoose";

// Fetch all appointments
export async function GET(req: Request, { params }: { params: { id?: string } }) {
  try {
    await dbConnect();

    if (params?.id) {
      // Fetch a single appointment by ID
      if (!mongoose.Types.ObjectId.isValid(params.id)) {
        return NextResponse.json(
          { success: false, error: "Invalid appointment ID" },
          { status: 400 }
        );
      }

      const appointment = await Appointment.findById(params.id);

      if (!appointment) {
        return NextResponse.json(
          { success: false, error: "Appointment not found" },
          { status: 404 }
        );
      }

      return NextResponse.json({ success: true, data: appointment }, { status: 200 });
    }

    // Fetch all appointments
    const appointments = await Appointment.find({}).sort({ createdAt: -1 });

    return NextResponse.json({ success: true, data: appointments }, { status: 200 });
  } catch (error) {
    console.error("Error fetching appointments:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Create a new appointment
export async function POST(req: Request) {
  try {
    const body = await req.json();
    await dbConnect();

    const requiredFields = ["fullName", "cnic", "dateOfBirth", "age", "email", "contact", "service", "equationAnswer"];

    for (const field of requiredFields) {
      if (!body[field]) {
        return NextResponse.json({ success: false, error: `Missing required field: ${field}` }, { status: 400 });
      }
    }

    const newAppointment = await Appointment.create(body);

    return NextResponse.json(
      { success: true, data: newAppointment, appointmentId: newAppointment._id },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Update appointment status
export async function PATCH(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    const { status } = await req.json();

    if (!id || !mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ success: false, error: "Invalid or missing appointment ID" }, { status: 400 });
    }

    if (!status || !["scheduled", "pending", "canceled"].includes(status)) {
      return NextResponse.json({ success: false, error: "Invalid status value" }, { status: 400 });
    }

    await dbConnect();
    const updatedAppointment = await Appointment.findByIdAndUpdate(id, { status }, { new: true });

    if (!updatedAppointment) {
      return NextResponse.json({ success: false, error: "Appointment not found" }, { status: 404 });
    }

    return NextResponse.json({ success: true, data: updatedAppointment }, { status: 200 });
  } catch (error) {
    console.error("Error updating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}







id route.ts 


import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";

export async function GET(request: NextRequest, context: { params: { id: string } }) {
    try {
        await dbConnect();

        // Ensure params are extracted properly
        const { params } = context;  
        if (!params || !params.id) {
            return NextResponse.json({ success: false, error: "Invalid appointment ID" }, { status: 400 });
        }

        const { id } = params;

        // Validate MongoDB ObjectId format
        if (!id.match(/^[0-9a-fA-F]{24}$/)) {
            return NextResponse.json({ success: false, error: "Invalid ObjectId format" }, { status: 400 });
        }

        const appointment = await Appointment.findById(id);
        if (!appointment) {
            return NextResponse.json({ success: false, error: "Appointment not found" }, { status: 404 });
        }

        return NextResponse.json({ success: true, appointment }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ success: false, error: "Server error" }, { status: 500 });
    }
}






'use client';

import React, { useState } from "react";
import {
  FaFacebookF,
  FaGithub,
  FaLinkedinIn,
  FaPills,
  FaHeartbeat,
  FaSyringe,
  FaHandHoldingHeart,
  FaPhoneAlt,
} from "react-icons/fa";
import Link from "next/link";
import { motion } from "framer-motion";

const Footer = () => {
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const handleSubscribe = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      setMessage("Please enter a valid email address.");
      return;
    }

    try {
      const response = await fetch("/api/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();
      setMessage(data.message);
      if (response.status === 201) setEmail("");
    } catch (_error) { // Fixed error handling
      setMessage("An error occurred. Please try again later.");
    }
  };

  return (
    <footer className="relative bg-gray-900 text-gray-300 py-12 px-6 lg:px-20">
      {/* Background Glow Effect */}
      <div className="absolute inset-0 pointer-events-none">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 0.15 }}
          className="absolute inset-0 bg-green-500 blur-[150px]"
        />
      </div>

      {/* Newsletter Subscription */}
      <div className="max-w-3xl mx-auto text-center mb-10">
        <h3 className="text-lg sm:text-2xl font-semibold text-white">
          Stay Updated!
        </h3>
        <p className="text-sm text-gray-400 mb-5">
          Subscribe for the latest updates & exclusive health tips.
        </p>
        <form
          onSubmit={handleSubscribe}
          className="flex flex-col sm:flex-row items-center gap-4"
        >
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="flex-1 w-full p-3 rounded-lg bg-gray-800 text-white focus:ring-2 focus:ring-green-500 placeholder-gray-400 text-sm"
          />
          <button
            type="submit"
            className="w-full sm:w-1/3 bg-green-500 hover:bg-green-600 text-white text-sm px-6 py-3 rounded-lg transition-all"
          >
            Subscribe
          </button>
        </form>
        {message && (
          <p
            className={`mt-3 text-sm ${
              message.startsWith("Thank") ? "text-green-400" : "text-red-400"
            }`}
          >
            {message}
          </p>
        )}
      </div>

      {/* Footer Sections */}
      <div className="max-w-7xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-10">
        {/* About ABCare */}
        <div>
          <h2 className="text-2xl font-bold text-white tracking-wide mb-3">
            ABCare
          </h2>
          <p className="text-sm text-gray-400">
            Providing high-standard healthcare services, including Lab, Physio, Nursing, and Pharmacy delivery.
          </p>
        </div>

        {/* Quick Links */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Quick Links</h3>
          <ul className="space-y-2">
            {[
              { label: "Pharmacy", icon: FaPills, link: "/medicines", color: "text-red-400" },
              { label: "Lab Services", icon: FaHeartbeat, link: "/lab", color: "text-blue-400" },
              { label: "Vaccination", icon: FaSyringe, link: "/vaccination", color: "text-yellow-400" },
              { label: "Mother Care", icon: FaHandHoldingHeart, link: "/mothercare", color: "text-pink-400" },
              { label: "Physio", icon: FaPhoneAlt, link: "/rehabilitationServices", color: "text-green-400" },
              { label: "Tele Clinic", icon: FaPhoneAlt, link: "/tele", color: "text-purple-400" },
            ].map(({ label, icon: Icon, link, color }) => (
              <li key={label} className="flex items-center gap-3 group">
                <Icon className={`${color} text-lg transition-colors group-hover:text-white`} />
                <Link href={link} className="text-sm text-gray-300 hover:text-green-400 transition-all">
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>

        {/* Contact Info */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Contact Us</h3>
          <p className="text-sm text-gray-400">
            üìç 123 Healthcare Street, Jaranwala, Pakistan
          </p>
          <p className="text-sm text-gray-400">üìß info@abcare.com</p>
          <p className="text-sm text-gray-400">üìû +123 456 7890</p>
        </div>

        {/* Social Media */}
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Follow Us</h3>
          <div className="flex space-x-5">
            {[
              { icon: FaFacebookF, link: "#", color: "text-blue-600" },
              { icon: FaGithub, link: "#", color: "text-gray-700" },
              { icon: FaLinkedinIn, link: "#", color: "text-blue-500" },
            ].map(({ icon: Icon, link, color }) => (
              <a
                key={link}
                href={link}
                className="w-10 h-10 flex items-center justify-center bg-gray-800 rounded-full text-gray-300 hover:bg-green-500 hover:text-white transition-all shadow-md"
              >
                <Icon className={`${color} text-lg`} />
              </a>
            ))}
          </div>
        </div>
      </div>

      {/* Divider */}
      <div className="mt-10 border-t border-gray-700 opacity-50"></div>

      {/* Copyright */}
      <div className="mt-5 text-center text-sm text-gray-500">
        <p>¬© {new Date().getFullYear()} ABCare. All Rights Reserved.</p>
      </div>
    </footer>
  );
};

export default Footer;








'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-toastify';
import { FaUser, FaIdCard, FaCalendarAlt, FaEnvelope, FaPhone, FaCheckCircle, FaCalculator } from 'react-icons/fa';

const BookAppointment = () => {
  const router = useRouter();
  const [formData, setFormData] = useState({
    fullName: '',
    cnic: '',
    dateOfBirth: '',
    age: '',
    email: '',
    contact: '',
    service: '',
    selectedDate: '',
    selectedTime: '',
    equationAnswer: '',
  });

  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [availableTimes] = useState([
    '08:30 AM', '09:30 AM', '10:30 AM', '11:30 AM', '12:30 PM', '01:30 PM', '02:30 PM', '03:30 PM', '04:30 PM'
  ]);
  const [weekDays, setWeekDays] = useState<string[]>([]);

  useEffect(() => {
    generateWeekDays();
  }, []);

  const generateWeekDays = () => {
    const days: string[] = [];
    const now = new Date();
    for (let i = 0; i < 7; i++) {
      const date = new Date();
      date.setDate(now.getDate() + i);
      const dayAbbr = date.toLocaleDateString('en-US', { weekday: 'short' });
      const formattedDate = date.toISOString().split('T')[0];
      days.push(`${dayAbbr}-${formattedDate}`);
    }
    setWeekDays(days);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.selectedDate || !formData.selectedTime) {
      toast.error('Please select a valid date and time.');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/appointments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (data.success) {
        toast.success('‚úÖ Appointment successfully booked!');
        setSubmitted(true);
        setShowConfirm(false);
        toast.info(`A confirmation email has been sent to ${formData.email}`);
        router.push(`/appointment-details/${data.appointmentId}`);
      } else {
        toast.error(data.error || '‚ùå Failed to book appointment');
      }
    } catch (error: any) {
      toast.error('‚ö†Ô∏è An error occurred while booking the appointment.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center px-6 py-12 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-200">
      <div className="bg-gray-800/90 backdrop-blur-lg shadow-xl rounded-xl p-8 w-full max-w-2xl">
        <h1 className="text-3xl font-bold text-center text-white mb-6">üìÖ Book Your Appointment</h1>

        {submitted && (
          <div className="bg-green-500 text-white text-center p-3 rounded-lg mb-4 flex items-center justify-center gap-2">
            <FaCheckCircle /> Appointment booked! Confirmation sent to {formData.email}.
          </div>
        )}

        <form onSubmit={handleSubmit} className="flex flex-col gap-6">
          {/* Input Fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[{
              label: 'Full Name', name: 'fullName', type: 'text', icon: FaUser
            }, {
              label: 'CNIC (without dashes)', name: 'cnic', type: 'text', icon: FaIdCard
            }, {
              label: 'Date of Birth', name: 'dateOfBirth', type: 'date', icon: FaCalendarAlt
            }, {
              label: 'Age', name: 'age', type: 'number'
            }, {
              label: 'Email', name: 'email', type: 'email', icon: FaEnvelope
            }, {
              label: 'Contact', name: 'contact', type: 'tel', icon: FaPhone
            }].map((field, index) => (
              <div key={index} className="relative">
                {field.icon && <field.icon className="absolute left-3 top-3 text-gray-400" />}
                <input
                  type={field.type}
                  name={field.name}
                  placeholder={field.label}
                  value={formData[field.name]}
                  onChange={handleChange}
                  required
                  className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 pl-10 focus:ring-2 focus:ring-green-500 outline-none transition-all"
                />
              </div>
            ))}
          </div>

          {/* Service Selection */}
          <select
            name="service"
            value={formData.service}
            onChange={handleChange}
            required
            className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 outline-none focus:ring-2 focus:ring-green-500 transition-all"
          >
            <option value="">Select a Service</option>
            <option value="Home Lab">Home Lab</option>
            <option value="Home Physio">Home Physio</option>
            <option value="Home Pharmacy">Home Pharmacy</option>
            <option value="Tele Medicine">Tele Medicine</option>
          </select>

          {/* Date Selection */}
          <div className="w-full">
            <h3 className="text-lg font-semibold text-white mb-2">Choose a Date:</h3>
            <div className="flex gap-2 flex-wrap">
              {weekDays.map((day, index) => {
                const [dayAbbr, date] = day.split('-');
                return (
                  <button
                    key={index}
                    type="button"
                    className={`px-4 py-2 rounded-lg border ${formData.selectedDate === date
                      ? 'bg-green-500 text-white border-green-400 shadow-lg'
                      : 'bg-gray-800 text-gray-300 border-gray-600 hover:bg-green-600 hover:text-white'
                    }`}
                    onClick={() => setFormData({ ...formData, selectedDate: date })}
                  >
                    {dayAbbr}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Time Selection */}
          {formData.selectedDate && (
            <div className="mt-4">
              <h3 className="text-lg font-semibold text-white mb-2">Choose a Time:</h3>
              <div className="grid grid-cols-3 gap-2">
                {availableTimes.map((time, index) => (
                  <button
                    key={index}
                    className={`py-2 px-3 rounded-lg border ${formData.selectedTime === time
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-800 text-gray-300 hover:bg-green-600 hover:text-white'
                    }`}
                    onClick={() => {
                      setFormData({ ...formData, selectedTime: time });
                      setShowConfirm(true);
                    }}
                  >
                    {time}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Confirmation Message */}
          {showConfirm && formData.selectedDate && formData.selectedTime && (
            <div className="bg-green-700 text-white text-center p-3 rounded-lg flex items-center gap-2">
              <FaCheckCircle className="text-xl" />
              <p>
                {new Date(formData.selectedDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric', day: 'numeric' })}, {formData.selectedTime}
              </p>
            </div>
          )}

          {/* Equation Input */}
          <div className="relative">
            <FaCalculator className="absolute left-3 top-3 text-gray-400" />
            <input
              type="text"
              name="equationAnswer"
              placeholder="Equation 8+5 =?"
              value={formData.equationAnswer}
              onChange={handleChange}
              required
              className="w-full bg-gray-700 text-gray-300 border border-gray-600 rounded-lg py-3 px-4 pl-10 focus:ring-2 focus:ring-green-500 outline-none transition-all"
            />
          </div>

          {/* Submit Button */}
          <button type="submit" className="w-full bg-green-500 text-white py-3 rounded-lg font-semibold">
            {loading ? 'Booking...' : 'Book Appointment'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default BookAppointment;




import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";
import { isValidObjectId } from "mongoose";

// ‚úÖ Ensure the context type is correctly inferred
interface Context {
  params: { id: string };
}

export async function GET(
  request: NextRequest,
  { params }: Context // ‚úÖ Correct destructuring and type
) {
  try {
    await dbConnect();

    // Extract ID properly
    const id = params.id;

    if (!id) {
      return NextResponse.json(
        { success: false, error: "Missing appointment ID" },
        { status: 400 }
      );
    }

    if (!isValidObjectId(id)) {
      return NextResponse.json(
        { success: false, error: "Invalid ObjectId format" },
        { status: 400 }
      );
    }

    const appointment = await Appointment.findById(id);

    if (!appointment) {
      return NextResponse.json(
        { success: false, error: "Appointment not found" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { success: true, appointment },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error fetching appointment:", error);
    return NextResponse.json(
      { success: false, error: "Server error" },
      { status: 500 }
    );
  }
}





api/route.ts




import { NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";
import mongoose from "mongoose";

// Fetch all appointments
export async function GET(req: Request, { params }: { params: { id?: string } }) {
  try {
    await dbConnect();

    if (params?.id) {
      // Fetch a single appointment by ID
      if (!mongoose.Types.ObjectId.isValid(params.id)) {
        return NextResponse.json(
          { success: false, error: "Invalid appointment ID" },
          { status: 400 }
        );
      }

      const appointment = await Appointment.findById(params.id);

      if (!appointment) {
        return NextResponse.json(
          { success: false, error: "Appointment not found" },
          { status: 404 }
        );
      }

      return NextResponse.json({ success: true, data: appointment }, { status: 200 });
    }

    // Fetch all appointments
    const appointments = await Appointment.find({}).sort({ createdAt: -1 });

    return NextResponse.json({ success: true, data: appointments }, { status: 200 });
  } catch (error) {
    console.error("Error fetching appointments:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Create a new appointment
export async function POST(req: Request) {
  try {
    const body = await req.json();
    await dbConnect();

    const requiredFields = ["fullName", "cnic", "dateOfBirth", "age", "email", "contact", "service", "equationAnswer"];

    for (const field of requiredFields) {
      if (!body[field]) {
        return NextResponse.json({ success: false, error: `Missing required field: ${field}` }, { status: 400 });
      }
    }

    const newAppointment = await Appointment.create(body);

    return NextResponse.json(
      { success: true, data: newAppointment, appointmentId: newAppointment._id },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

// Update appointment status
export async function PATCH(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    const { status } = await req.json();

    if (!id || !mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ success: false, error: "Invalid or missing appointment ID" }, { status: 400 });
    }

    if (!status || !["scheduled", "pending", "canceled"].includes(status)) {
      return NextResponse.json({ success: false, error: "Invalid status value" }, { status: 400 });
    }

    await dbConnect();
    const updatedAppointment = await Appointment.findByIdAndUpdate(id, { status }, { new: true });

    if (!updatedAppointment) {
      return NextResponse.json({ success: false, error: "Appointment not found" }, { status: 404 });
    }

    return NextResponse.json({ success: true, data: updatedAppointment }, { status: 200 });
  } catch (error) {
    console.error("Error updating appointment:", error);
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 });
  }
}

























"use client";

import Image from "next/image";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import BackgroundLines from "./BackgroundLines";

const HeroSection = () => {
  const router = useRouter();

  const handleBookAppointment = () => {
    router.push("/book-appointment");
  };

  return (
    <section className="relative bg-gray-900 text-white overflow-hidden flex flex-col items-center justify-center min-h-[80vh] w-full pt-4 sm:pt-6">
      <BackgroundLines />

      {/* Hero Content */}
      <div className="container mx-auto flex flex-col md:flex-row items-center justify-between px-6 sm:px-8 relative z-10">
        {/* Left: Text content */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, ease: "easeOut" }}
          className="flex-1 text-center md:text-left space-y-4"
        >
          <h1 className="text-3xl sm:text-5xl font-extrabold tracking-tight leading-tight bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-blue-500">
            Premium Healthcare for Everyone
          </h1>
          <p className="text-base sm:text-lg max-w-lg mx-auto md:mx-0 text-gray-300 leading-relaxed">
            Our expert doctors deliver world-class medical care tailored to your health needs.
          </p>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleBookAppointment}
            className="mt-5 py-2 px-5 sm:py-3 sm:px-7 bg-green-600 text-white font-semibold text-sm sm:text-lg rounded-full hover:bg-green-700 shadow-xl transition duration-300"
          >
            Book Appointment
          </motion.button>
        </motion.div>

        {/* Right: Image with Overlayed Statistics */}
        <div className="flex-1 flex justify-center md:justify-end mt-14 sm:mt-16 relative">
          <motion.div whileHover={{ scale: 1.05 }} className="relative group overflow-visible">
            {/* Image */}
            <div className="relative">
              <Image
                src="/abcares.webp"
                alt="Doctor Illustration"
                width={450}
                height={320}
                className="rounded-xl shadow-2xl transition-transform duration-300"
              />

              {/* Statistics Section */}
              <div className="absolute bottom-0 left-0 w-full bg-gray-800 text-white rounded-t-xl shadow-lg p-4 sm:p-6">
                <div className="flex flex-row justify-center sm:justify-start gap-4">
                  <motion.div
                    whileHover={{ scale: 1.03 }}
                    className="p-3 sm:p-4 bg-gray-900 rounded-md shadow-md border border-gray-700 flex-1"
                  >
                    <h2 className="text-base sm:text-xl font-bold text-green-400">500+</h2>
                    <p className="text-xs sm:text-sm text-gray-300">Expert Doctors</p>
                  </motion.div>

                  <motion.div
                    whileHover={{ scale: 1.03 }}
                    className="p-3 sm:p-4 bg-gray-900 rounded-md shadow-md border border-gray-700 flex-1"
                  >
                    <h2 className="text-base sm:text-xl font-bold text-blue-400">20K+</h2>
                    <p className="text-xs sm:text-sm text-gray-300">Patients Treated</p>
                  </motion.div>

                  <motion.div
                    whileHover={{ scale: 1.03 }}
                    className="p-3 sm:p-4 bg-gray-900 rounded-md shadow-md border border-gray-700 flex-1"
                  >
                    <h2 className="text-base sm:text-xl font-bold text-yellow-400">100+</h2>
                    <p className="text-xs sm:text-sm text-gray-300">Medical Services</p>
                  </motion.div>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;









"use client";

import { useState, useEffect } from "react";
import { MdEvent } from "react-icons/md";
import Link from "next/link";
import { FiMenu } from "react-icons/fi";
import { IoMdClose } from "react-icons/io";
import { motion, AnimatePresence } from "framer-motion";
import { useRouter } from "next/navigation";

const Navbar = () => {
  const [menuOpen, setMenuOpen] = useState(false);
  const [homeDropdownOpen, setHomeDropdownOpen] = useState(false);
  const [mobileHomeDropdown, setMobileHomeDropdown] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    setIsLoggedIn(!!token); // Check if token exists
  }, []);

  const toggleMenu = () => setMenuOpen((prev) => !prev);
  const toggleMobileHomeDropdown = () => setMobileHomeDropdown((prev) => !prev);

  const handleLogout = () => {
    localStorage.removeItem("token"); // Remove token from storage
    setIsLoggedIn(false); // Update state
    router.push("/login"); // Redirect to login
  };

  return (
    <nav className="bg-gradient-to-r from-gray-900 to-gray-800 text-white shadow-lg sticky top-0 z-50 border-b border-gray-700">
      <div className="container mx-auto flex items-center justify-between py-4 px-6">
        {/* Logo */}
        <Link href="/" className="flex items-center">
          <MdEvent size={32} className="text-green-400" />
          <span className="ml-3 text-2xl font-bold text-green-300 hover:scale-105 transition">
            ABCare
          </span>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden lg:flex items-center px-8 py-2 bg-gray-900 rounded-full space-x-6 shadow-lg border border-gray-700">
          <div
            className="relative"
            onMouseEnter={() => setHomeDropdownOpen(true)}
            onMouseLeave={() => setHomeDropdownOpen(false)}
          >
            <button className="text-white font-semibold hover:text-green-400 transition px-4 py-2 rounded-md hover:bg-green-700">
              Home
            </button>
            <AnimatePresence>
              {homeDropdownOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="absolute top-full left-0 mt-2 bg-gray-800 rounded-lg shadow-lg border border-gray-700 w-56"
                >
                  {["Pharmacy", "Vaccination", "Phisio", "Mothercare", "Lab"].map((service) => (
                    <Link
                      key={service}
                      href={`/${service.toLowerCase() === "phisio" ? "rehabilitationServices" 
                        : service.toLowerCase() === "pharmacy" ? "medicines" 
                        : service.toLowerCase()}`}
                      className="block px-4 py-3 text-white hover:bg-green-700 rounded-md"
                    >
                      Home {service} Service
                    </Link>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
          <Link href="/doctors" className="text-white font-semibold hover:text-green-400 px-4 py-2 rounded-md hover:bg-green-700">
            Our Doctors
          </Link>
          <Link href="/aboutus" className="text-white font-semibold hover:text-green-400 px-4 py-2 rounded-md hover:bg-green-700">
            About Us
          </Link>
        </div>

        {/* Desktop Buttons */}
        <div className="hidden lg:flex items-center space-x-3">
          <Link href="/book-appointment" className="bg-green-600 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
            Book Appointment
          </Link>

          {isLoggedIn && (
            <Link href="/dashboard" className="bg-teal-600 text-white px-5 py-2 rounded-full shadow-md hover:bg-teal-500 transition">
              My Appointments
            </Link>
          )}

          {!isLoggedIn ? (
            <Link href="/login" className="bg-gray-900 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
              Login
            </Link>
          ) : (
            <button onClick={handleLogout} className="bg-gray-900 text-white px-5 py-2 rounded-full shadow-md hover:bg-green-500 transition">
              Logout
            </button>
          )}
        </div>
        {/* Mobile Menu Button */}
        <button
          className="lg:hidden flex items-center justify-center w-12 h-12 border border-gray-600 rounded-lg bg-gray-800"
          onClick={toggleMenu}
        >
          {menuOpen ? <IoMdClose size={28} className="text-white" /> : <FiMenu size={28} className="text-white" />}
        </button>
      </div>

      {/* Mobile Menu */}
      <AnimatePresence>
        {menuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="lg:hidden bg-gray-900 text-white p-6 border-t border-gray-700 rounded-b-lg"
          >
            <button
              onClick={toggleMobileHomeDropdown}
              className="flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:bg-green-700 rounded-md transition"
            >
              Home
              <span>{mobileHomeDropdown ? "‚ñ≤" : "‚ñº"}</span>
            </button>
            <AnimatePresence>
              {mobileHomeDropdown && (
                <motion.div className="ml-4 mt-2 space-y-2">
                  {[
                    { name: "Pharmacy", path: "/medicines" },
                    { name: "Vaccination", path: "/vaccination" },
                    { name: "Phisio", path: "/rehabilitationServices" },
                    { name: "Mothercare", path: "/mothercare" },
                    { name: "Lab", path: "/lab" },
                  ].map((service) => (
                    <Link
                      key={service.name}
                      href={service.path}
                      className="block px-4 py-2 hover:bg-green-700 rounded-md"
                      onClick={() => setMenuOpen(false)}
                    >
                      Home {service.name} Service
                    </Link>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
            <Link href="/doctors" className="block px-4 py-3 hover:bg-green-700 rounded-md" onClick={() => setMenuOpen(false)}>
              Our Doctors
            </Link>
            <Link href="/aboutus" className="block px-4 py-3 hover:bg-green-700 rounded-md" onClick={() => setMenuOpen(false)}>
              About Us
            </Link>
            <div className="mt-6 flex flex-col gap-3 sm:flex-row">
              <Link href="/book-appointment" className="w-full bg-green-600 text-white text-center py-3 rounded-md shadow-md hover:bg-green-500 transition" onClick={() => setMenuOpen(false)}>
                Book Appointment
              </Link>
                            {isLoggedIn && (
                <Link href="/dashboard" className="w-full bg-teal-600 text-white text-center py-3 rounded-md shadow-md hover:bg-teal-500 transition" onClick={() => setMenuOpen(false)}>
                  My Appointments
                </Link>
              )}
              {!isLoggedIn ? (
                <Link href="/login" className="w-full bg-gray-900 text-white text-center py-3 rounded-md shadow-md hover:bg-green-500 transition" onClick={() => setMenuOpen(false)}>
                  Login
                </Link>
              ) : (
                <button onClick={() => { handleLogout(); setMenuOpen(false); }} className="w-full bg-gray-900 text-white py-3 rounded-md shadow-md hover:bg-green-500 transition">
                  Logout
                </button>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </nav>
  );
};

export default Navbar;
