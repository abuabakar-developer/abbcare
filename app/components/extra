'use client';

import React, { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import Image from 'next/image';
import {
  faHeartPulse,
  faFaceSmile,
  faLungs,
  faBrain,
  faTooth,
  faBone,
  faEye,
  faChild,
  faCapsules,
  faMicroscope,
} from '@fortawesome/free-solid-svg-icons';
import { IconDefinition } from '@fortawesome/fontawesome-svg-core';

// Define the specialties
interface Specialty {
  title: string;
  icon: IconDefinition;
}

interface Doctor {
  name: string;
  specialty: string;
  experience: string;
  rating: number;
  imageUrl: string;
}

// Static list of doctors
const doctorsData: Doctor[] = [
  { name: 'Dr. Ahmad Al-Sayed', specialty: 'Cardiology', experience: '10 years', rating: 4.8, imageUrl: '/ur1.webp' },
  { name: 'Dr. Amina Ibrahim', specialty: 'Cardiology', experience: '12 years', rating: 4.9, imageUrl: '/dn1.webp' },
  { name: 'Dr. Bilal Malik', specialty: 'Pharmacology', experience: '8 years', rating: 4.7, imageUrl: '/ab2.webp' },
  { name: 'Dr. Layla Ahmed', specialty: 'Pediatrics', experience: '7 years', rating: 4.6, imageUrl: '/ab3.webp' },
  { name: 'Dr. Yusuf Al-Mansoor', specialty: 'Orthopedics', experience: '15 years', rating: 4.9, imageUrl: '/g4.webp' },
  { name: 'Dr. Fatima Zain', specialty: 'Pharmacology', experience: '9 years', rating: 4.7, imageUrl: '/dn2.jpg' },
  { name: 'Dr. Khalid Al-Farsi', specialty: 'Pharmacology', experience: '11 years', rating: 4.8, imageUrl: '/gf3.jpg' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Orthopedics', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Pathology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Pediatrics', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Ophthalmology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Ophthalmology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Dentistry', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Dentistry', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Pathology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Orthopedics', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Neurology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Neurology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Pulmonology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Pulmonology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Dermatology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
  { name: 'Dr. Mariam Al-Hassan', specialty: 'Dermatology', experience: '10 years', rating: 4.7, imageUrl: '/ab.webp' },
];


const specialties: Specialty[] = [
  { title: 'Cardiology', icon: faHeartPulse },
  { title: 'Dermatology', icon: faFaceSmile },
  { title: 'Pulmonology', icon: faLungs },
  { title: 'Neurology', icon: faBrain },
  { title: 'Dentistry', icon: faTooth },
  { title: 'Orthopedics', icon: faBone },
  { title: 'Ophthalmology', icon: faEye },
  { title: 'Pediatrics', icon: faChild },
  { title: 'Pharmacology', icon: faCapsules },
  { title: 'Pathology', icon: faMicroscope },
];
                               
const DoctorsPage: React.FC = () => {
  const router = useRouter();
  const [selectedSpecialty, setSelectedSpecialty] = useState<string | null>(null);

  // Filter doctors based on selected specialty
  const filteredDoctors = selectedSpecialty
    ? doctorsData.filter((doctor) => doctor.specialty === selectedSpecialty)
    : [];

  const handleSpecialtyClick = (specialty: string) => {
    setSelectedSpecialty(specialty);
  };

  const handleBookAppointment = (doctorName: string) => {
    router.push(`/book-appointment?doctor=${encodeURIComponent(doctorName)}`);
  };

  return (
    <section className="bg-gradient-to-br from-blue-50 to-blue-100 min-h-screen py-16 px-6 sm:px-10 lg:px-20">
      <div className="text-center mb-12">
        <h1 className="text-4xl sm:text-5xl font-extrabold text-blue-900">Our Doctors</h1>
        <p className="text-lg sm:text-xl text-blue-700 mt-4">
          Meet our highly skilled specialists, dedicated to providing the best healthcare services.
        </p>
      </div>

      {/* Specialties Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        {specialties.map((specialty, index) => (
          <div
            key={index}
            className={`p-6 sm:p-8 bg-white shadow-xl rounded-lg hover:shadow-2xl hover:-translate-y-2 transform transition duration-300 ${
              selectedSpecialty === specialty.title ? 'border-2 border-blue-500' : ''
            }`}
            onClick={() => handleSpecialtyClick(specialty.title)}
          >
            <div className="flex items-center justify-center bg-blue-500 text-white w-16 h-16 rounded-full mx-auto mb-6 shadow-lg hover:scale-110 transition-transform duration-300">
              <FontAwesomeIcon icon={specialty.icon} className="text-3xl" />
            </div>
            <h3 className="text-center text-xl sm:text-2xl font-semibold mb-4">{specialty.title}</h3>
          </div>
        ))}
      </div>

      {/* Doctors List */}
      <div className="mt-12">
        {selectedSpecialty && (
          <>
            <h2 className="text-center text-2xl font-semibold mb-6">
              {filteredDoctors.length} Doctor(s) Found for {selectedSpecialty}
            </h2>

            {filteredDoctors.length === 0 ? (
              <p className="text-center text-gray-600">No doctors available for this specialty.</p>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
                {filteredDoctors.map((doctor, index) => (
                  <div key={index} className="p-6 bg-white shadow-lg rounded-lg text-center">
                    <Image src={doctor.imageUrl} alt={doctor.name} width={150} height={150} className="rounded-full mx-auto mb-4" />
                    <h3 className="text-xl font-semibold">{doctor.name}</h3>
                    <p className="text-gray-600">{doctor.experience} experience</p>
                    <p className="text-yellow-500">‚≠ê {doctor.rating}</p>
                    <button
                      onClick={() => handleBookAppointment(doctor.name)}
                      className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-700 transition"
                    >
                      Book Appointment
                    </button>
                  </div>
                ))}
              </div>
            )}
          </>
        )}
      </div>
    </section>
  );
};

export default DoctorsPage;






'use client';

import React, { useState } from "react";
import {
  FaFacebookF,
  FaInstagram,
  FaLinkedinIn,
  FaPills,
  FaHeartbeat,
  FaSyringe,
  FaHandHoldingHeart,
  FaPhoneAlt,
} from "react-icons/fa";
import Link from "next/link"; // Import Link component from Next.js

const Footer = () => {
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const handleSubscribe = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      setMessage("Please enter a valid email address.");
      return;
    }

    try {
      const response = await fetch("/api/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();
      setMessage(data.message);

      if (response.status === 201) {
        setEmail("");
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("Subscription error:", error.message);
        setMessage("An error occurred. Please try again later.");
      } else {
        console.error("Unexpected error:", error);
        setMessage("An unexpected error occurred.");
      }
    }
  };

  return (
    <footer className="relative py-16 bg-gradient-to-r from-blue-900 via-blue-800 to-blue-900 text-white">
      <div className="relative z-20 max-w-7xl mx-auto px-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-12">
        {/* Brand Section */}
        <div>
          <h2 className="text-3xl font-bold mb-4 leading-tight opacity-70">
            ABCare
          </h2>
          <p className="text-gray-300 text-md leading-relaxed">
            At{" "}
            <span className="text-lg text-white font-extrabold">ABCare</span>,
            we are committed to providing you with high-standard healthcare
            services at the convenience of your home, with services like Lab,
            Physio, Nursing, and Pharmacy delivery. Trusted for online
            appointments, we connect you to certified medical professionals
            with ease and reliability.
          </p>
        </div>

        {/* Quick Links */}
        <div>
          <h3 className="text-xl font-semibold mb-4 opacity-70">Quick Links</h3>
          <ul className="space-y-3">
            {[
              { label: "Home Pharmacy Services", icon: FaPills, link: "/medicines" },
              { label: "Home Lab Services", icon: FaHeartbeat, link: "/lab" },
              { label: "Home Vaccination Services", icon: FaSyringe, link: "/vaccination" },
              { label: "Home Mother Care", icon: FaHandHoldingHeart, link: "/mothercare" },
              { label: "Home Physio", icon: FaPhoneAlt, link: "/rehabilitationServices" },
              { label: "Home Tele Clinic", icon: FaPhoneAlt, link: "/tele" },
            ].map(({ label, icon: Icon, link }) => (
              <li key={label} className="flex items-center group">
                <Icon className="mr-2 text-blue-400 text-lg" />
                <Link
                  href={link}
                  className="relative text-base pb-1 block border-b border-white hover:text-blue-400 transition-colors"
                >
                  {label}
                  <span className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400 scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></span>
                </Link>
              </li>
            ))}
          </ul>
        </div>

        {/* Newsletter Section */}
        <div>
          <h3 className="text-xl font-semibold mb-4 opacity-70">Subscribe</h3>
          <p className="text-gray-300 text-md leading-relaxed mb-4">
            Get the latest updates and tips delivered straight to your inbox.
          </p>
          <form onSubmit={handleSubscribe} className="flex flex-col space-y-3">
            <input
              type="email"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-3 rounded-md text-black outline-none focus:ring-2 focus:ring-blue-400"
            />
            <button
              type="submit"
              className="bg-blue-500 hover:bg-blue-600 text-white px-5 py-2 rounded-md transition text-sm font-medium"
            >
              Subscribe
            </button>
          </form>
          {message && (
            <p
              className={`mt-3 text-sm ${
                message.startsWith("Thank")
                  ? "text-green-400"
                  : "text-red-400"
              }`}
            >
              {message}
            </p>
          )}
        </div>

        {/* Social Media Section */}
        <div>
          <h3 className="text-xl font-semibold mb-4 opacity-70">Follow Us</h3>
          <p className="text-gray-300 text-md leading-relaxed mb-4">
            Stay connected through our social platforms.
          </p>
          <div className="flex space-x-4">
            {[
              { icon: FaFacebookF, label: "Facebook" },
              { icon: FaInstagram, label: "Instagram" },
              { icon: FaLinkedinIn, label: "LinkedIn" },
            ].map(({ icon: Icon, label }) => (
              <a
                key={label}
                href="#"
                className="text-gray-300 hover:text-blue-400 transition-colors text-xl"
                aria-label={label}
              >
                <Icon />
              </a>
            ))}
          </div>
        </div>
      </div>

      {/* Copyright Section */}
      <div className="bg-blue-700 py-4 text-center text-sm text-gray-300 mt-16">
        &copy; {new Date().getFullYear()} ABCare. All rights reserved.
      </div>
    </footer>
  );
};

export default Footer;





'use client';

import React, { useState } from 'react'; // Import React for React.createElement
import { toast } from 'react-toastify';
import { useRouter } from 'next/navigation';
import { FaUser, FaIdCard, FaCalendarAlt, FaEnvelope, FaPhone, FaCheckCircle } from 'react-icons/fa';

type FormData = {
  fullName: string;
  cnic: string;
  dateOfBirth: string;
  age: string;
  email: string;
  contact: string;
  service: string;
  equationAnswer: string;
};

const BookAppointment = () => {
  const [formData, setFormData] = useState<FormData>({
    fullName: '',
    cnic: '',
    dateOfBirth: '',
    age: '',
    email: '',
    contact: '',
    service: '',
    equationAnswer: '',
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const router = useRouter();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.cnic.match(/^\d{13}$/)) {
      toast.error('Please enter a valid 13-digit CNIC (without dashes).');
      return;
    }

    if (formData.equationAnswer !== '13') {
      toast.error('Please solve the equation 8 + 5 correctly!');
      return;
    }

    try {
      const response = await fetch('/api/appointments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const result = await response.json();
        toast.success('Appointment successfully booked!');
        setIsSubmitted(true);
        router.push(`/onboarding/${result.id}`);
      } else {
        throw new Error('Failed to book appointment');
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('An unknown error occurred');
      }
    }
  };

  const handleAdminRedirect = () => {
    router.push('/adminpanel');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4 sm:px-8 py-10">
      <div className="bg-white shadow-xl rounded-3xl p-8 max-w-4xl w-full ring-1 ring-gray-200 hover:ring-indigo-400 transition-transform duration-300 transform hover:scale-105">
        <h1 className="text-4xl sm:text-5xl font-extrabold text-center text-gray-800 mb-6 tracking-wide">
          Book Your Appointment
        </h1>
        <p className="text-center text-gray-600 text-lg sm:text-xl mb-8 leading-relaxed">
          Fill out the form below to schedule your appointment.It&apos;s quick and hassle-free.
        </p>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {[
              { label: 'Full Name', name: 'fullName', type: 'text', icon: FaUser },
              { label: 'CNIC (without dashes)', name: 'cnic', type: 'text', icon: FaIdCard },
              { label: 'Date of Birth', name: 'dateOfBirth', type: 'date', icon: FaCalendarAlt },
              { label: 'Age', name: 'age', type: 'number', icon: null },
              { label: 'Email', name: 'email', type: 'email', icon: FaEnvelope },
              { label: 'Contact', name: 'contact', type: 'tel', icon: FaPhone },
            ].map((field, index) => (
              <div key={index} className="space-y-1">
                <label className="block text-sm font-medium text-gray-700">{field.label}</label>
                <div className="relative">
                  {field.icon && <field.icon className="absolute left-3 top-3 text-gray-400" />}
                  <input
                    type={field.type}
                    name={field.name}
                    placeholder={`Enter ${field.label}`}
                    value={formData[field.name as keyof FormData]}
                    onChange={handleChange}
                    required
                    className={`w-full pl-${field.icon ? '10' : '4'} border border-gray-300 rounded-lg py-3 text-gray-800 focus:ring-indigo-500 focus:border-indigo-500`}
                  />
                </div>
              </div>
            ))}

            <div className="space-y-1 sm:col-span-2">
              <label className="block text-sm font-medium text-gray-700">Service</label>
              <select
                name="service"
                value={formData.service}
                onChange={handleChange}
                required
                className="w-full border border-gray-300 rounded-lg py-3 text-gray-800 focus:ring-indigo-500 focus:border-indigo-500"
              >
                <option value="">Select a Service</option>
                <option value="Home Lab">Home Lab</option>
                <option value="Home Physio">Home Physio</option>
                <option value="Home Pharmacy">Home Pharmacy</option>
                <option value="Tele Medicine">Tele Medicine</option>
              </select>
            </div>

            <div className="space-y-1 sm:col-span-2">
              <label className="block text-sm font-medium text-gray-700">Solve: 8 + 5</label>
              <input
                type="text"
                name="equationAnswer"
                placeholder="Your Answer"
                value={formData.equationAnswer}
                onChange={handleChange}
                required
                className="w-full border border-gray-300 rounded-lg py-3 text-gray-800 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
          </div>

          <div className="flex flex-col sm:flex-row sm:justify-between gap-4 mt-6">
            <button
              type="submit"
              className="w-full sm:w-auto bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-6 rounded-lg font-semibold hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              Submit
            </button>
            <button
              type="button"
              onClick={handleAdminRedirect}
              className="w-full sm:w-auto bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500 flex items-center justify-center"
            >
              <FaUser className="mr-2" /> Admin
            </button>
          </div>
        </form>

        {isSubmitted && (
          <div className="mt-6 text-center">
            <FaCheckCircle className="text-green-500 text-4xl mb-3 animate-bounce" />
            <p className="text-lg text-green-600 font-semibold">
              Your appointment has been successfully booked!
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default BookAppointment;







'use client';
import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { FiMenu } from 'react-icons/fi';
import { IoMdClose } from 'react-icons/io';
import { FaPhone } from 'react-icons/fa';
import { useRouter } from 'next/navigation';

const Navbar = () => {   
  const [menuOpen, setMenuOpen] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsLoggedIn(!!token);
  }, []);

  const toggleMenu = () => setMenuOpen((prev) => !prev);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
    router.push('/login');
  };
  const handleScroll = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {
    e.preventDefault();
    const section = document.getElementById('about-us');
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  };
  

  return (
    <>
      {/* Navbar */}
      <nav className="bg-gray-100 text-gray-800 sticky top-0 z-50 shadow-md">
        <div className="container mx-auto flex items-center justify-between py-4 px-4 lg:px-6">
          {/* Logo */}
          <Link href="/" className="flex items-center">
            <Image
              src="/medical.jpg"
              alt="Medical Logo"
              width={50}
              height={50}
              className="rounded-full shadow-lg w-12 h-12 sm:w-16 sm:h-16 transition-transform transform hover:scale-110"
            />
            <span className="ml-3 text-2xl font-bold text-blue-600 hover:scale-105 transition-transform">
              ABCare
            </span>
          </Link>       
           
          {/* Links for Larger Screens */}
          <div className="hidden lg:flex items-center space-x-6 font-semibold">
            <div
              className="relative group"
              onMouseEnter={() => setIsDropdownOpen(true)}
              onMouseLeave={() => setIsDropdownOpen(false)}
            >
              <button className="flex items-center text-gray-800 hover:text-blue-600 transition">
                <span className="mr-2">Home</span>
                <svg
                  className={`w-4 h-4 transition-transform ${
                    isDropdownOpen ? 'rotate-180' : 'rotate-0'
                  }`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </button>

              {/* Dropdown */}
              {isDropdownOpen && (
                <div className="absolute top-full left-0 mt-2 bg-blue-100 text-gray-800 shadow-md rounded-md py-2 w-56">
                  <Link
                    href="/medicines"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Home Pharmacy
                  </Link>
                  <Link
                    href="/vaccination"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Home Vaccination
                  </Link>
                  <Link
                    href="/lab"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Home Lab
                  </Link>
                  <Link
                    href="/mothercare"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Home Mother Care
                  </Link>
                  <Link
                    href="/rehabilitationServices"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Home Physio
                  </Link>
                  <Link
                    href="/tele"
                    className="block px-4 py-2 hover:bg-blue-200 rounded-md"
                  >
                    Tele Clinics
                  </Link>
                </div>
              )}
            </div>
            <Link href="/#about-us" onClick={handleScroll} className="hover:text-blue-600 transition">
              About Us
            </Link>
            <Link href="/doctors" className="hover:text-blue-600 transition">
              Our Doctors
            </Link>
            {!isLoggedIn ? (
              <Link
                href="/login"
                className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition"
              >
                Login
              </Link>
            ) : (
              <button
                onClick={handleLogout}
                className="bg-yellow-500 px-4 py-2 rounded-lg shadow hover:bg-yellow-600 transition"
              >
                Logout
              </button>
            )}
          </div>

          {/* Mobile Menu Button */}
          <div className="lg:hidden">
            <button
              className="text-gray-800 hover:text-blue-600 focus:outline-none"
              onClick={toggleMenu}
            >
              {menuOpen ? <IoMdClose size={28} /> : <FiMenu size={28} />}
            </button>
          </div>
        </div>

        {/* Mobile Menu */}
        {menuOpen && (
          <div className="lg:hidden bg-blue-600 text-white w-full shadow-lg absolute top-full left-0 z-50">
            <ul className="flex flex-col items-center space-y-6 py-6">
              <li>
                <Link
                  href="/medicines"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Home Pharmacy
                </Link>
              </li>
              <li>
                <Link
                  href="/vaccination"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Home Vaccination
                </Link>
              </li>
              <li>
                <Link
                  href="/lab"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Home Lab
                </Link>
              </li>
              <li>
                <Link
                  href="/mothercare"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Home Mother Care
                </Link>
              </li>
              <li>
                <Link
                  href="/rehabilitationServices"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Home Physio
                </Link>
              </li>
              <li>
                <Link
                  href="/tele"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Tele Clinics
                </Link>
              </li>
              <Link
                  href="/doctors"
                  onClick={toggleMenu}
                  className="hover:bg-blue-700 px-4 py-2 rounded-lg"
                >
                  Our Doctors
                </Link>
              <li>
                {!isLoggedIn ? (
                  <Link
                    href="/login"
                    onClick={toggleMenu}
                    className="bg-yellow-500 text-gray-800 px-6 py-3 rounded-full shadow-md hover:scale-105 transition-transform"
                  >
                    Login
                  </Link>
                ) : (
                  <button
                    onClick={() => {
                      handleLogout();
                      toggleMenu();
                    }}
                    className="bg-yellow-500 text-gray-800 px-4 py-2 rounded-lg hover:bg-yellow-600"
                  >
                    Logout
                  </button>
                )}
              </li>
            </ul>
          </div>
        )}
      </nav>
      {/* Fixed "Call Now" Button */}
      <button
        onClick={() => window.location.href = 'tel:+03154195240'}
        className="fixed bottom-4 right-4 bg-blue-600 text-white text-lg font-semibold p-4 rounded-full shadow-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 transition-transform hover:scale-105 lg:hidden z-[1000]"
        aria-label="Call Now"
      >
        <FaPhone size={24} />
      </button>
    </>
  );
};                 

export default Navbar;













api/appointments 

import { NextResponse } from "next/server";
import dbConnect from "@/utils/dbConnect";
import Appointment from "@/models/Appointment";
import mongoose from "mongoose";

// Handle GET request (Fetch all appointments)
export async function GET() {
  try {
    await dbConnect();
    const appointments = await Appointment.find({});
    
    return NextResponse.json(appointments, { status: 200 });
  } catch (error) {
    console.error("Error fetching appointments:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// Handle POST request (Create a new appointment)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    await dbConnect();

    const newAppointment = await Appointment.create(body);
    
    return NextResponse.json(newAppointment, { status: 201 });
  } catch (error) {
    console.error("Error creating appointment:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// Handle PATCH request (Update appointment status)
export async function PATCH(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    const { status } = await req.json();

    if (!id || !mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ error: "Invalid or missing appointment ID" }, { status: 400 });
    }

    if (!status || !["scheduled", "pending", "canceled"].includes(status)) {
      return NextResponse.json({ error: "Invalid status value" }, { status: 400 });
    }

    await dbConnect();
    const updatedAppointment = await Appointment.findByIdAndUpdate(id, { status }, { new: true });

    if (!updatedAppointment) {
      return NextResponse.json({ error: "Appointment not found" }, { status: 404 });
    }

    return NextResponse.json(updatedAppointment, { status: 200 });
  } catch (error) {
    console.error("Error updating appointment:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}


